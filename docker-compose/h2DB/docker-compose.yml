services:
  
  read:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/loki-config.yaml -target=read,query-frontend,query-scheduler,querier"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/loki-config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 20
    networks: &loki-dns
      my-banking-application:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.2
    # ADD 'querier' to the target list here
    command: "-config.file=/etc/loki/loki-config.yaml -target=write,querier"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/loki-config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 20
    networks:
      <<: *loki-dns

  backend:
    image: grafana/loki:3.1.2
    # ADD 'querier' to the target list here
    command: "-config.file=/etc/loki/loki-config.yaml -target=backend,querier" # <-- MODIFIED
    ports:
      - "3103:3100"
      - "7946"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/loki-config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 20
    networks:
      <<: *loki-dns

  gateway:
    image: nginx:1.27.3
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;
        
        events {
          worker_connections  1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          # Add proxy timeout settings
          proxy_connect_timeout       300s;
          proxy_send_timeout          300s;
          proxy_read_timeout          300s;
          send_timeout                300s;
        
          server {
            listen 3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass http://write:3100\$$request_uri;
              # Add specific timeouts for write operations
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
            }
        
            location = /api/prom/tail {
              proxy_pass http://read:3100\$$request_uri;
              proxy_set_header Upgrade "\$$http_upgrade";
              proxy_set_header Connection "upgrade";
              # Longer timeout for streaming
              proxy_read_timeout 3600s;
              proxy_send_timeout 3600s;
            }
        
            location ~ /api/prom/.* {
              proxy_pass http://read:3100\$$request_uri;
              # Longer timeout for query operations
              proxy_connect_timeout 300s;
              proxy_send_timeout 300s;
              proxy_read_timeout 300s;
            }
        
            location = /loki/api/v1/push {
              proxy_pass http://write:3100\$$request_uri;
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass http://write:3100\$$request_uri;
              proxy_set_header Upgrade "\$$http_upgrade";
              proxy_set_header Connection "upgrade";
              proxy_read_timeout 3600s;
              proxy_send_timeout 3600s;
            }
        
            location ~ /loki/api/.* {
              proxy_pass http://read:3100\$$request_uri;
              # This is crucial for query_range operations
              proxy_connect_timeout 300s;
              proxy_send_timeout 300s;
              proxy_read_timeout 300s;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3100/ || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 20
    extends:
      file: common-config.yml
      service: network-deploy-service

  alloy:
    image: grafana/alloy:v1.5.1
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/alloy-local-config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/alloy-local-config.yaml
    ports:
      - "12345:12345"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000"
    volumes:
      - minio-data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 25s
      timeout: 20s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      # Add dataproxy timeout settings
      - GF_DATAPROXY_TIMEOUT=300
      - GF_DATAPROXY_DIAL_TIMEOUT=300
      - GF_DATAPROXY_KEEP_ALIVE_SECONDS=300
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat > /etc/grafana/provisioning/datasources/ds.yaml << 'EOF'
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            timeout: 300
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
              timeout: 300
              maxLines: 1000
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 20s
      timeout: 5s
      retries: 20
    extends:
      file: common-config.yml
      service: network-deploy-service


  configserver:
    image: "sushantpaudel77/configserver"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: configserver
      SPRING_PROFILES_ACTIVE: git
      ENCRYPT_KEY: fdohfdfo30r3nr0u23rkoewf0892u3r0938jn3f30r309
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "sushantpaudel77/eurekaserver"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"

  accounts:
    image: "sushantpaudel77/accounts"
    container_name: account-ms
    ports:
      - "8080:8080"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: accounts
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  loans:
    image: "sushantpaudel77/loans"
    container_name: loans-ms
    ports:
      - "8090:8090"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: loans
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  cards:
    image: "sushantpaudel77/cards"
    container_name: cards-ms
    ports:
      - "9000:9000"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: cards
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  gatewayserver:
    image: "sushantpaudel77/gatewayserver"
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_healthy
      loans:
        condition: service_healthy
      cards:
        condition: service_healthy
    #      redis:
    #        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8072/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
    #      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
    #      SPRING_DATA_REDIS_HOST: redis
    #      SPRING_DATA_REDIS_PORT: 6379
    #      SPRING_DATA_REDIS_TIMEOUT: 1s
    extends:
      file: common-config.yml
      service: microservice-eureka-config

networks:
  my-banking-application:
    driver: bridge

volumes:
  minio-data: