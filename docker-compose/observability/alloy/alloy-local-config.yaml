// Discover Docker containers
discovery.docker "docker_containers" {
host             = "unix:///var/run/docker.sock"
refresh_interval = "10s"
}

// Relabel discovered containers
discovery.relabel "docker_containers" {
targets = discovery.docker.docker_containers.targets

// Keep only running containers
rule {
source_labels = ["__meta_docker_container_running"]
regex         = "true"
action        = "keep"
}

// Extract container name (removing leading slash)
rule {
source_labels = ["__meta_docker_container_name"]
regex         = "/(.+)"
target_label  = "container"
replacement   = "${1}"
}

// Extract service name from compose labels
rule {
source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
target_label  = "service"
regex         = "(.+)"
replacement   = "${1}"
}

// Extract project name from compose labels
rule {
source_labels = ["__meta_docker_container_label_com_docker_compose_project"]
target_label  = "project"
regex         = "(.+)"
replacement   = "${1}"
}

// Add image name
rule {
source_labels = ["__meta_docker_container_image"]
target_label  = "image"
regex         = "(.+)"
replacement   = "${1}"
}

// Add container ID (short form)
rule {
source_labels = ["__meta_docker_container_id"]
regex         = "(.{12}).*"
target_label  = "container_id"
replacement   = "${1}"
}

// Add hostname
rule {
target_label = "host"
replacement  = "docker-host"
}

// Keep containers that have compose service labels or are named containers
rule {
source_labels = ["__meta_docker_container_label_com_docker_compose_service", "container"]
regex         = "(.+)|(.+-ms)|(.+server)|(.+)"
action        = "keep"
}
}

// Process and forward logs with proper labels
loki.source.docker "docker_logs" {
host       = "unix:///var/run/docker.sock"
targets    = discovery.relabel.docker_containers.output
forward_to = [loki.process.add_labels.receiver]

// Add some static labels if needed
labels = {
environment = "dev"
source      = "docker"
}
}

// Optional: Add additional processing to clean up or add more labels
loki.process "add_labels" {
forward_to = [loki.write.default.receiver]

stage.labels {
values = {
// These will be automatically inherited from the targets
// but you can override or add additional logic here
}
}

// Optional: Parse JSON logs from Spring Boot applications
stage.match {
selector = "{service=~\".*server|accounts|loans|cards\"}"

stage.json {
expressions = {
timestamp = "timestamp"
level     = "level"
logger    = "logger"
message   = "message"
}
}

stage.labels {
values = {
level  = "level"
logger = "logger"
}
}
}
}

// Write to Loki through the gateway
loki.write "default" {
endpoint {
url = "http://gateway:3100/loki/api/v1/push"
headers = {
"X-Scope-OrgID" = "tenant1",
}
}
}